// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(QuestionDbContext))]
    [Migration("20240406153623_initdbcore")]
    partial class initdbcore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.DocxFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocxFiles");
                });

            modelBuilder.Entity("Domain.Models.Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("integer");

                    b.Property<string>("TrueOption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Domain.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DocxFileId")
                        .HasColumnType("integer");

                    b.Property<long>("OptionId")
                        .HasColumnType("bigint");

                    b.Property<string>("QuestionInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocxFileId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DocxFileId")
                        .HasColumnType("integer");

                    b.Property<int>("DocxId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocxFileId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Options", b =>
                {
                    b.HasOne("Domain.Models.Questions", null)
                        .WithMany("Options")
                        .HasForeignKey("QuestionsId");
                });

            modelBuilder.Entity("Domain.Models.Questions", b =>
                {
                    b.HasOne("Domain.Models.DocxFile", null)
                        .WithMany("Questions")
                        .HasForeignKey("DocxFileId");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.DocxFile", "DocxFile")
                        .WithMany()
                        .HasForeignKey("DocxFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocxFile");
                });

            modelBuilder.Entity("Domain.Models.DocxFile", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Models.Questions", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
